Escaped mutants:
================

1) /home/wyrihaximus/Projects/ReactPHPParallel/worker-pool/src/Thread.php:43    [M] Identical

--- Original
+++ New
@@ @@
         $eventLoopBridge->observe($out)->subscribe(function (Outcome $message) : void {
             $deferred = $this->deferreds[$message->id()];
             unset($this->deferreds[$message->id()]);
-            if ($this->closed === TRUE_ && count($this->deferreds) === ZERO) {
+            if ($this->closed === TRUE_ && count($this->deferreds) !== ZERO) {
                 $this->out->close();
             }
             if ($message instanceof NegativeOutcome) {


2) /home/wyrihaximus/Projects/ReactPHPParallel/worker-pool/src/Thread.php:85    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
         $this->in->close();
         $this->closed = TRUE_;
-        if (count($this->deferreds) !== ZERO) {
+        if (count($this->deferreds) === ZERO) {
             return;
         }
         $this->out->close();
     }
 }


3) /home/wyrihaximus/Projects/ReactPHPParallel/worker-pool/src/Thread.php:89    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if (count($this->deferreds) !== ZERO) {
             return;
         }
-        $this->out->close();
+        
     }
 }


4) /home/wyrihaximus/Projects/ReactPHPParallel/worker-pool/src/Workers/ThrownWork.php:18    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     private object $work;
     public function __construct(Work $work)
     {
-        parent::__construct('Throwing work');
+        
         $this->work = $work->work();
     }
     public function work() : object


Timed Out mutants:
==================

1) /home/wyrihaximus/Projects/ReactPHPParallel/worker-pool/src/Error.php:22    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->error = throwable_encode($error);
     }
-    public function error() : Throwable
+    protected function error() : Throwable
     {
         return throwable_decode($this->error);
     }
 }


2) /home/wyrihaximus/Projects/ReactPHPParallel/worker-pool/src/Thread.php:39    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $this->in = $in;
         $this->out = $out;
-        $eventLoopBridge->observe($out)->subscribe(function (Outcome $message) : void {
-            $deferred = $this->deferreds[$message->id()];
-            unset($this->deferreds[$message->id()]);
-            if ($this->closed === TRUE_ && count($this->deferreds) === ZERO) {
-                $this->out->close();
-            }
-            if ($message instanceof NegativeOutcome) {
-                $deferred->reject($message->error()->error());
-                return;
-            }
-            if ($message instanceof PositiveOutcome) {
-                $deferred->resolve($message->result()->result());
-                return;
-            }
-        });
+        
     }
     public static function create(WorkerFactory $workerFactory, EventLoopBridge $eventLoopBridge, PoolInterface $pool) : self
     {


3) /home/wyrihaximus/Projects/ReactPHPParallel/worker-pool/src/Thread.php:48    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $this->out->close();
             }
             if ($message instanceof NegativeOutcome) {
-                $deferred->reject($message->error()->error());
+                
                 return;
             }
             if ($message instanceof PositiveOutcome) {


4) /home/wyrihaximus/Projects/ReactPHPParallel/worker-pool/src/Thread.php:54    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 return;
             }
             if ($message instanceof PositiveOutcome) {
-                $deferred->resolve($message->result()->result());
+                
                 return;
             }
         });


5) /home/wyrihaximus/Projects/ReactPHPParallel/worker-pool/src/Thread.php:76    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $id = spl_object_hash($work);
         $this->deferreds[$id] = new Deferred();
-        $this->in->send(new WorkMessage($id, $work));
+        
         return $this->deferreds[$id]->promise();
     }
     public function close() : void


6) /home/wyrihaximus/Projects/ReactPHPParallel/worker-pool/src/Thread.php:81    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->in->send(new WorkMessage($id, $work));
         return $this->deferreds[$id]->promise();
     }
-    public function close() : void
+    protected function close() : void
     {
         $this->in->close();
         $this->closed = TRUE_;


7) /home/wyrihaximus/Projects/ReactPHPParallel/worker-pool/src/Thread.php:83    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function close() : void
     {
-        $this->in->close();
+        
         $this->closed = TRUE_;
         if (count($this->deferreds) !== ZERO) {
             return;


8) /home/wyrihaximus/Projects/ReactPHPParallel/worker-pool/src/Thread/Performer.php:29    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 while ($work = $in->recv()) {
                     assert($work instanceof WorkMessage);
                     try {
-                        $out->send(new ResultMessage($work->id(), $worker->perform($work->work())));
+                        
                     } catch (Throwable $throwable) {
                         $out->send(new ErrorMessage($work->id(), new Error($throwable)));
                     }


9) /home/wyrihaximus/Projects/ReactPHPParallel/worker-pool/src/Thread/Performer.php:31    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                     try {
                         $out->send(new ResultMessage($work->id(), $worker->perform($work->work())));
                     } catch (Throwable $throwable) {
-                        $out->send(new ErrorMessage($work->id(), new Error($throwable)));
+                        
                     }
                 }
             } catch (Closed $closed) {


Not Covered mutants:
====================

1) /home/wyrihaximus/Projects/ReactPHPParallel/worker-pool/src/Thread.php:44    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $deferred = $this->deferreds[$message->id()];
             unset($this->deferreds[$message->id()]);
             if ($this->closed === TRUE_ && count($this->deferreds) === ZERO) {
-                $this->out->close();
+                
             }
             if ($message instanceof NegativeOutcome) {
                 $deferred->reject($message->error()->error());


2) /home/wyrihaximus/Projects/ReactPHPParallel/worker-pool/src/Worker.php:76    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
                 $resolve($this->spawnRuntime());
                 return;
             }
-            $resolve($this->getIdleThread());
+            
         }))->then(function (Thread $thread) use($work) : PromiseInterface {
             /** @psalm-suppress UndefinedInterfaceMethod */
             return $thread->perform($work)->always(function () use($thread) : void {


3) /home/wyrihaximus/Projects/ReactPHPParallel/worker-pool/src/Worker.php:87    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                     $this->startTtlTimer($thread);
                     return;
                 }
-                $this->closeThread(spl_object_hash($thread));
+                
             });
         });
     }


4) /home/wyrihaximus/Projects/ReactPHPParallel/worker-pool/src/Worker.php:111    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $this->closed = TRUE_;
         foreach ($this->threads as $hash => $runtime) {
-            $this->closeThread($hash);
+            
         }
         $this->pool->releaseGroup($this->group);
         $this->pool->kill();


5) /home/wyrihaximus/Projects/ReactPHPParallel/worker-pool/src/Worker.php:137    [M] Identical

--- Original
+++ New
@@ @@
     {
         $hash = array_pop($this->idleThreads);
         assert(is_string($hash));
-        if (array_key_exists($hash, $this->ttlTimers) === TRUE_) {
+        if (array_key_exists($hash, $this->ttlTimers) !== TRUE_) {
             $this->loop->cancelTimer($this->ttlTimers[$hash]);
             unset($this->ttlTimers[$hash]);
         }


6) /home/wyrihaximus/Projects/ReactPHPParallel/worker-pool/src/Worker.php:138    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $hash = array_pop($this->idleThreads);
         assert(is_string($hash));
         if (array_key_exists($hash, $this->ttlTimers) === TRUE_) {
-            $this->loop->cancelTimer($this->ttlTimers[$hash]);
+            
             unset($this->ttlTimers[$hash]);
         }
         return $this->threads[$hash];


7) /home/wyrihaximus/Projects/ReactPHPParallel/worker-pool/src/Worker.php:164    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $hash = spl_object_hash($thread);
         $this->ttlTimers[$hash] = $this->loop->addTimer($this->ttl, function () use($hash) : void {
-            $this->closeThread($hash);
+            
         });
     }
     private function closeThread(string $hash) : void
